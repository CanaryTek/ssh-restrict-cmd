#!/bin/bash
#
# Wrapper to securely run allowed commands through SSH key authentication
#
# Miguel Armas <kuko@canarytek.com>
#
# SSH key authentication allows us to restrict the commands that can be executed with a given
# key. The problem is that we may need to pass parameters and/or be able to run more than one 
# command with a given key. 
# What we to with this command is set ssh-restrict-cmd as the allowed command for the key in the
# authorized_keys file. SSH will run this command and save the original command (the one the user
# is trying to run) in an enviroment variable called SSH_ORIGINAL_COMMAND, we check if this command
# and run it only if it is included in the list of allowed command. 
#
# TODO: This is just a quick proof of concept, it needs a lot of work:
# - Make sure it's secure, make it impossible to run command other than the allowed list 
#   passing them with ";" or any other trick

# Strict mode
set -eufo pipefail

cmd=$SSH_ORIGINAL_COMMAND
cmdfile=${1:-}
debug=1
#logfile="/var/log/ssh-restrict-cmd.log"
logfile="ssh-restrict-cmd.log"

function debug {
	[ $debug = 1 ] && echo $*
}

function log {
	echo `date`" - $*" >> $logfile
}

function abort_if_dangerous {
	if echo "$*" | grep -q '[;&|><]'; then
		echo "COMMAND DENIED: Dangerous characters: $*"
		exit 1
	fi
}

debug "CMD: $cmd"

abort_if_dangerous $cmd

if echo $cmd | grep -q -f $cmdfile 2>/dev/null; then
	debug "$cmd matches"
	eval $cmd
	exit $?
fi

echo "COMMAND DENIED"
log "Denying cmd: $cmd"
exit 1

